% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods.R
\name{isLMM.glmmTMB}
\alias{isLMM.glmmTMB}
\alias{refit.glmmTMB}
\title{support methods for parametric bootstrapping}
\usage{
\method{isLMM}{glmmTMB}(x, ...)

\method{refit}{glmmTMB}(object, newresp, fast = FALSE, update_start = TRUE, ...)
}
\arguments{
\item{x}{a fitted glmmTMB object}

\item{...}{additional arguments (for generic consistency; ignored)}

\item{object}{a fitted glmmTMB object}

\item{newresp}{a new response vector}

\item{fast}{(logical) [EXPERIMENTAL] refit by modifying existing TMB object?}

\item{update_start}{(logical) use fitted coefficients as starting value?}

\item{...}{additional arguments (for generic consistency; ignored)}

}
\description{
see \code{\link[lme4]{refit}} and \code{\link[lme4:isREML]{isLMM}} for details
}
\details{
These methods are still somewhat experimental (check your results carefully!), but they should allow parametric bootstrapping.
\itemize{
\item By default (if \code{fast=FALSE}), works by copying and replacing the original response column in the data frame passed to \code{glmmTMB} and re-evaluating the original model call so they will only work properly if (1) the data frame is still available in the environment and (2) the response variable is specified as a single symbol (e.g. \code{proportion} or a two-column matrix constructed on the fly with \code{cbind()}. Untested with binomial models where the response is specified as a factor.
\item If \code{fast=TRUE}, \emph{or} if \code{options(glmmTMB.fast_refit=TRUE)} is set (this feature allows use of fast refitting with \code{bootMer} from the \code{lme4} package), this works by modifying the data in the environment of the underlying TMB object and re-optimizing. Current limitations:
\itemize{
\item Doesn't do any convergence checking/warning
\item Doesn't work with \code{profile = TRUE}
\item Doesn't handle "exotic" responses (i.e. anything but a
numeric vector, such as a two-column matrix or factor-valued response
for a binomial model)
\item Still requires access to the original environment, for reconstructing
control options
}
}
}
\examples{
if (requireNamespace("lme4")) {
\dontrun{
   fm1 <- glmmTMB(count~mined+(1|spp),
                  ziformula=~mined,
                  data=Salamanders,
                  family=nbinom1)
   ## single parametric bootstrap step: refit with data simulated from original model
   fm1R <- refit(fm1, simulate(fm1)[[1]])
   ## the bootMer function from lme4 provides a wrapper for doing multiple refits
   ##   with a specified summary function
   b1 <- lme4::bootMer(fm1, FUN=function(x) fixef(x)$zi, nsim=20, .progress="txt")
   if (requireNamespace("boot")) {
      boot.ci(b1,type="perc")
    }
   ## can run in parallel: may need to set up cluster explicitly,
   ## use clusterEvalQ() to load packages on workers
   if (requireNamespace("parallel")) {
      cl <- parallel::makeCluster(2)
      parallel::clusterEvalQ(cl, library("lme4"))
      parallel::clusterEvalQ(cl, library("glmmTMB"))
      b2 <- lme4::bootMer(fm1, FUN = function(x) fixef(x)$cond,
              nsim = 10, ncpus = 2, cl = cl, parallel = "snow")
   }
}
}
}
